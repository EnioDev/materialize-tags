{"version":3,"sources":["materialize-tags.js"],"names":["$","tagClass","item","itemValue","toString","itemText","this","itemTitle","onTagExists","$tag","hide","fadeIn","TagsMaterialize","element","options","itemsArray","$element","objectItems","placeholderText","hasAttribute","attr","inputSize","Math","max","length","$container","$input","appendTo","before","build","on","label","parents","parent","find","addClass","parentContainer","tags","removeClass","makeOptionItemFunction","key","propertyName","makeOptionFunction","value","htmlEncode","htmlEncodeContainer","text","html","doGetCaretPosition","oField","iCaretPos","document","selection","focus","oSel","createRange","moveStart","selectionStart","keyCombinationInList","keyPressEvent","lookupList","found","each","index","keyCombination","which","alt","hasOwnProperty","altKey","shift","shiftKey","ctrl","ctrlKey","defaultOptions","freeInput","addOnBlur","maxTags","undefined","maxChars","confirmKeys","trimValue","allowDuplicates","prototype","constructor","add","dontPushVal","self","trim","match","tagName","items","split","i","pushVal","existing","grep","maxInputLength","beforeItemAddEvent","Event","cancel","trigger","push","data","findInputWrapper","after","$existingTag","filter","remove","other","beforeItemRemoveEvent","inArray","splice","removeAll","pop","refresh","contents","nodeType","nodeValue","val","map","extend","typeaheadjs","typeaheadConfig","typeaheadDatasets","isArray","typeahead","proxy","obj","datum","valueKey","event","removeAttr","target","$inputWrapper","prev","next","$prevTag","$nextTag","textLength","ceil","maxLengthReached","substr","preventDefault","closest","destroy","off","removeData","show","input","elt","container","parentNode","fn","materialtags","arg1","arg2","arg3","results","retVal","Constructor","window","jQuery"],"mappings":"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","file":"materialize-tags.min.js","sourcesContent":["(function ($)\n{\n    \"use strict\";\n\n    /**\n     * Default Configuration\n     *\n     * @type {{tagClass: tagClass, itemValue: itemValue, itemText: itemText, itemTitle: itemTitle, freeInput: boolean, addOnBlur: boolean, maxTags: undefined, maxChars: undefined, confirmKeys: number[], onTagExists: onTagExists, trimValue: boolean, allowDuplicates: boolean}}\n     */\n    var defaultOptions = {\n        tagClass        : tagClass,\n        itemValue       : itemValue,\n        itemText        : itemText,\n        itemTitle       : itemTitle,\n        freeInput       : true,\n        addOnBlur       : true,\n        maxTags         : undefined,\n        maxChars        : undefined,\n        confirmKeys     : [13, 44],\n        onTagExists     : onTagExists,\n        trimValue       : true,\n        allowDuplicates : false\n    };\n\n    function tagClass(item)\n    {\n        return 'badge';\n    }\n\n    function itemValue(item)\n    {\n        return item ? item.toString() : item;\n    }\n\n    function itemText(item)\n    {\n        return this.itemValue(item);\n    }\n\n    function itemTitle(item)\n    {\n        return null;\n    }\n\n    function onTagExists(item, $tag)\n    {\n        $tag.hide().fadeIn();\n    }\n\n    /**\n     * Constructor function\n     *\n     * @param element\n     * @param options\n     * @constructor\n     */\n    function TagsMaterialize(element, options)\n    {\n        this.itemsArray = [];\n\n        this.$element = $(element);\n        this.$element.hide();\n\n        this.objectItems     = options && options.itemValue;\n        this.placeholderText = element.hasAttribute('placeholder') ? this.$element.attr('placeholder') : '';\n        this.inputSize       = Math.max(1, this.placeholderText.length);\n\n        this.$container = $('<div class=\"materialize-tags\"></div>');\n        this.$input     = $('<input type=\"text\" placeholder=\"' + this.placeholderText + '\"/>').appendTo(this.$container);\n\n        this.$element.before(this.$container);\n\n        this.build(options);\n\n        this.$input.on('focus', function ()\n        {\n            var label = $(this).parents('.materialize-tags').parent().find('label');\n            $(this).parents('.materialize-tags').addClass('active');\n\n            if (typeof label.attr('class') == 'undefined' || label.attr('class') == '')\n            {\n                label.addClass('active');\n            }\n        }).on('focusout', function ()\n        {\n            var parentContainer = $(this).parents('.materialize-tags'),\n                tags            = parentContainer.find('span.tag');\n            parentContainer.removeClass('active');\n            // Verify if is empty and remove \"active\" class from label\n            if (tags.length == 0)\n            {\n                parentContainer.parent().find('label').removeClass('active');\n            }\n        });\n    }\n\n    TagsMaterialize.prototype = {\n        constructor : TagsMaterialize,\n\n        /**\n         * Adds the given item as a new tag. Pass true to dontPushVal to prevent\n         * updating the elements val()\n         *\n         * @param item\n         * @param dontPushVal\n         * @param options\n         */\n        add : function (item, dontPushVal, options)\n        {\n            var self = this;\n\n            if (self.options.maxTags && self.itemsArray.length >= self.options.maxTags)\n            {\n                return;\n            }\n\n            // Ignore false values, except false\n            if (item !== false && !item)\n            {\n                return;\n            }\n\n            // Trim value\n            if (typeof item === \"string\" && self.options.trimValue)\n            {\n                item = $.trim(item);\n            }\n\n            // Throw an error when trying to add an object while the itemValue option was not set\n            if (typeof item === \"object\" && !self.objectItems)\n            {\n                throw(\"Can't add objects when itemValue option is not set\");\n            }\n\n            // Ignore strings only contain whitespace\n            if (item.toString().match(/^\\s*$/))\n            {\n                return;\n            }\n\n            if (typeof item === \"string\" && this.$element[0].tagName === 'INPUT')\n            {\n                var items = item.split(',');\n                if (items.length > 1)\n                {\n                    for (var i = 0; i < items.length; i++)\n                    {\n                        this.add(items[i], true);\n                    }\n\n                    if (!dontPushVal)\n                    {\n                        self.pushVal();\n                    }\n                    return;\n                }\n            }\n\n            var itemValue = self.options.itemValue(item),\n                itemText  = self.options.itemText(item),\n                tagClass  = self.options.tagClass(item),\n                itemTitle = self.options.itemTitle(item);\n\n            // Ignore items all ready added\n            var existing = $.grep(self.itemsArray, function (item) { return self.options.itemValue(item) === itemValue; })[0];\n            if (existing && !self.options.allowDuplicates)\n            {\n                // Invoke onTagExists\n                if (self.options.onTagExists)\n                {\n                    var $existingTag = $(\".tag\", self.$container).filter(function () { return $(this).data(\"item\") === existing; });\n                    self.options.onTagExists(item, $existingTag);\n                }\n                return;\n            }\n\n            // if length greater than limit\n            if (self.items().toString().length + item.length + 1 > self.options.maxInputLength)\n            {\n                return;\n            }\n\n            // raise beforeItemAdd arg\n            var beforeItemAddEvent = $.Event('beforeItemAdd', {item : item, cancel : false, options : options});\n            self.$element.trigger(beforeItemAddEvent);\n            if (beforeItemAddEvent.cancel)\n            {\n                return;\n            }\n\n            // register item in internal array and map\n            self.itemsArray.push(item);\n\n            // add a tag element\n            var $tag = $('<span class=\"tag ' + htmlEncode(tagClass) + (itemTitle !== null ? ('\" title=\"' + itemTitle) : '') + '\">' + htmlEncode(itemText) + '<span class=\"mdi-content-clear right\" data-role=\"remove\"></span></span>');\n            $tag.data('item', item);\n            self.findInputWrapper().before($tag);\n            $tag.after(' ');\n\n            if (!dontPushVal)\n            {\n                self.pushVal();\n            }\n\n            // Add class when reached maxTags\n            if (self.options.maxTags === self.itemsArray.length || self.items().toString().length === self.options.maxInputLength)\n            {\n                self.$container.addClass('materialize-tags-max');\n            }\n\n            self.$element.trigger($.Event('itemAdded', {item : item, options : options}));\n        },\n\n        /**\n         * Removes the given item. Pass true to dontPushVal to prevent updating the\n         * elements val()\n         *\n         * @param item\n         * @param dontPushVal\n         * @param options\n         */\n        remove : function (item, dontPushVal, options)\n        {\n            var self = this;\n\n            if (self.objectItems)\n            {\n                if (typeof item === \"object\")\n                {\n                    item = $.grep(self.itemsArray, function (other) { return self.options.itemValue(other) == self.options.itemValue(item); });\n                }\n                else\n                {\n                    item = $.grep(self.itemsArray, function (other) { return self.options.itemValue(other) == item; });\n                }\n\n                item = item[item.length - 1];\n            }\n\n            if (item)\n            {\n                var beforeItemRemoveEvent = $.Event('beforeItemRemove', {\n                    item    : item,\n                    cancel  : false,\n                    options : options\n                });\n                self.$element.trigger(beforeItemRemoveEvent);\n                if (beforeItemRemoveEvent.cancel)\n                {\n                    return;\n                }\n\n                $('.tag', self.$container).filter(function () { return $(this).data('item') === item; }).remove();\n\n                if ($.inArray(item, self.itemsArray) !== -1)\n                {\n                    self.itemsArray.splice($.inArray(item, self.itemsArray), 1);\n                }\n            }\n\n            if (!dontPushVal)\n            {\n                self.pushVal();\n            }\n\n            // Remove class when reached maxTags\n            if (self.options.maxTags > self.itemsArray.length)\n            {\n                self.$container.removeClass('materialize-tags-max');\n            }\n\n            self.$element.trigger($.Event('itemRemoved', {item : item, options : options}));\n        },\n\n        /**\n         * Removes all items\n         */\n        removeAll : function ()\n        {\n            var self = this;\n\n            $('.tag', self.$container).remove();\n\n            while (self.itemsArray.length > 0)\n            {\n                self.itemsArray.pop();\n            }\n\n            self.pushVal();\n        },\n\n        /**\n         * Refreshes the tags so they match the text/value of their corresponding\n         * item.\n         */\n        refresh : function ()\n        {\n            var self = this;\n            $('.tag', self.$container).each(function ()\n            {\n                var $tag        = $(this),\n                    item        = $tag.data('item'),\n                    itemValue   = self.options.itemValue(item),\n                    itemText    = self.options.itemText(item),\n                    tagClass    = self.options.tagClass(item);\n\n                // Update tag's class and inner text\n                $tag.attr('class', null);\n                $tag.addClass('tag ' + htmlEncode(tagClass));\n                $tag.contents().filter(function ()\n                {\n                    return this.nodeType == 3;\n                })[0].nodeValue = htmlEncode(itemText);\n\n            });\n        },\n\n        /**\n         * Returns the items added as tags\n         */\n        items : function ()\n        {\n            return this.itemsArray;\n        },\n\n        /**\n         * Assembly value by retrieving the value of each item, and set it on the\n         * element.\n         */\n        pushVal : function ()\n        {\n            var self = this,\n                val  = $.map(self.items(), function (item)\n                {\n                    return self.options.itemValue(item).toString();\n                });\n\n            self.$element.val(val, true).trigger('change');\n        },\n\n        /**\n         * Initializes the tags input behaviour on the element\n         *\n         * @param options\n         */\n        build : function (options)\n        {\n            var self = this;\n\n            self.options = $.extend({}, defaultOptions, options);\n            // When itemValue is set, freeInput should always be false\n            if (self.objectItems)\n            {\n                self.options.freeInput = false;\n            }\n\n            makeOptionItemFunction(self.options, 'itemValue');\n            makeOptionItemFunction(self.options, 'itemText');\n            makeOptionFunction(self.options, 'tagClass');\n\n            // Typeahead.js\n            if (self.options.typeaheadjs)\n            {\n                var typeaheadConfig   = null;\n                var typeaheadDatasets = {};\n\n                // Determine if main configurations were passed or simply a dataset\n                var typeaheadjs = self.options.typeaheadjs;\n                if ($.isArray(typeaheadjs))\n                {\n                    typeaheadConfig   = typeaheadjs[0];\n                    typeaheadDatasets = typeaheadjs[1];\n                }\n                else\n                {\n                    typeaheadDatasets = typeaheadjs;\n                }\n\n                self.$input.typeahead(typeaheadConfig, typeaheadDatasets).on('typeahead:selected', $.proxy(function (obj, datum)\n                {\n                    if (typeaheadDatasets.valueKey)\n                    {\n                        self.add(datum[typeaheadDatasets.valueKey]);\n                    }\n                    else\n                    {\n                        self.add(datum);\n                    }\n                    self.$input.typeahead('val', '');\n                }, self));\n            }\n\n            self.$container.on('click', $.proxy(function (event)\n            {\n                if (!self.$element.attr('disabled'))\n                {\n                    self.$input.removeAttr('disabled');\n                }\n                self.$input.focus();\n            }, self));\n\n            if (self.options.addOnBlur && self.options.freeInput)\n            {\n                self.$input.on('focusout', $.proxy(function (event)\n                {\n                    // HACK: only process on focusout when no typeahead opened, to\n                    //       avoid adding the typeahead text as tag\n                    if ($('.typeahead, .twitter-typeahead', self.$container).length === 0)\n                    {\n                        self.add(self.$input.val());\n                        self.$input.val('');\n                    }\n                }, self));\n            }\n\n            self.$container.on('keydown', 'input', $.proxy(function (event)\n            {\n                var $input        = $(event.target),\n                    $inputWrapper = self.findInputWrapper();\n\n                if (self.$element.attr('disabled'))\n                {\n                    self.$input.attr('disabled', 'disabled');\n                    return;\n                }\n\n                switch (event.which)\n                {\n                    // BACKSPACE\n                    case 8:\n                        if (doGetCaretPosition($input[0]) === 0)\n                        {\n                            var prev = $inputWrapper.prev();\n                            if (prev)\n                            {\n                                self.remove(prev.data('item'));\n                            }\n                        }\n                        break;\n\n                    // DELETE\n                    case 46:\n                        if (doGetCaretPosition($input[0]) === 0)\n                        {\n                            var next = $inputWrapper.next();\n                            if (next)\n                            {\n                                self.remove(next.data('item'));\n                            }\n                        }\n                        break;\n\n                    // LEFT ARROW\n                    case 37:\n                        // Try to move the input before the previous tag\n                        var $prevTag = $inputWrapper.prev();\n                        if ($input.val().length === 0 && $prevTag[0])\n                        {\n                            $prevTag.before($inputWrapper);\n                            $input.focus();\n                        }\n                        break;\n                    // RIGHT ARROW\n                    case 39:\n                        // Try to move the input after the next tag\n                        var $nextTag = $inputWrapper.next();\n                        if ($input.val().length === 0 && $nextTag[0])\n                        {\n                            $nextTag.after($inputWrapper);\n                            $input.focus();\n                        }\n                        break;\n                    default:\n                    // ignore\n                }\n\n                // Reset internal input's size\n                var textLength = $input.val().length,\n                    wordSpace  = Math.ceil(textLength / 5),\n                    size       = textLength + wordSpace + 1;\n                $input.attr('size', Math.max(this.inputSize, $input.val().length));\n            }, self));\n\n            self.$container.on('keypress', 'input', $.proxy(function (event)\n            {\n                var $input = $(event.target);\n\n                if (self.$element.attr('disabled'))\n                {\n                    self.$input.attr('disabled', 'disabled');\n                    return;\n                }\n\n                var text             = $input.val(),\n                    maxLengthReached = self.options.maxChars && text.length >= self.options.maxChars;\n                if (self.options.freeInput && (keyCombinationInList(event, self.options.confirmKeys) || maxLengthReached))\n                {\n                    self.add(maxLengthReached ? text.substr(0, self.options.maxChars) : text);\n                    $input.val('');\n                    event.preventDefault();\n                }\n\n                // Reset internal input's size\n                var textLength = $input.val().length,\n                    wordSpace  = Math.ceil(textLength / 5),\n                    size       = textLength + wordSpace + 1;\n                $input.attr('size', Math.max(this.inputSize, $input.val().length));\n            }, self));\n\n            // Remove icon clicked\n            self.$container.on('click', '[data-role=remove]', $.proxy(function (event)\n            {\n                if (self.$element.attr('disabled'))\n                {\n                    return;\n                }\n                self.remove($(event.target).closest('.tag').data('item'));\n            }, self));\n\n            // Only add existing value as tags when using strings as tags\n            if (self.options.itemValue === defaultOptions.itemValue)\n            {\n                if (self.$element[0].tagName === 'INPUT')\n                {\n                    self.add(self.$element.val());\n                }\n            }\n        },\n\n        /**\n         * Removes all materialtags behaviour and unregsiter all event handlers\n         */\n        destroy : function ()\n        {\n            var self = this;\n\n            // Unbind events\n            self.$container.off('keypress', 'input');\n            self.$container.off('click', '[role=remove]');\n\n            self.$container.remove();\n            self.$element.removeData('materialtags');\n            self.$element.show();\n        },\n\n        /**\n         * Sets focus on the materialtags\n         */\n        focus : function ()\n        {\n            this.$input.focus();\n        },\n\n        /**\n         * Returns the internal input element\n         */\n        input : function ()\n        {\n            return this.$input;\n        },\n\n        /**\n         * Returns the element which is wrapped around the internal input. This\n         * is normally the $container, but typeahead.js moves the $input element.\n         */\n        findInputWrapper : function ()\n        {\n            var elt       = this.$input[0],\n                container = this.$container[0];\n            while (elt && elt.parentNode !== container)\n            {\n                elt = elt.parentNode;\n            }\n\n            return $(elt);\n        }\n    };\n\n    /**\n     * Register JQuery plugin\n     *\n     * @param arg1\n     * @param arg2\n     * @param arg3\n     * @returns {Array}\n     */\n    $.fn.materialtags = function (arg1, arg2, arg3)\n    {\n        var results = [];\n\n        this.each(function ()\n        {\n            var materialtags = $(this).data('materialtags');\n            // Initialize a new material tags input\n            if (!materialtags)\n            {\n                materialtags = new TagsMaterialize(this, arg1);\n                $(this).data('materialtags', materialtags);\n                results.push(materialtags);\n\n                // Init tags from $(this).val()\n                $(this).val($(this).val());\n            }\n            else if (!arg1 && !arg2)\n            {\n                // materialtags already exists\n                // no function, trying to init\n                results.push(materialtags);\n            }\n            else if (materialtags[arg1] !== undefined)\n            {\n                // Invoke function on existing tags input\n                if (materialtags[arg1].length === 3 && arg3 !== undefined)\n                {\n                    var retVal = materialtags[arg1](arg2, null, arg3);\n                }\n                else\n                {\n                    var retVal = materialtags[arg1](arg2);\n                }\n                if (retVal !== undefined)\n                {\n                    results.push(retVal);\n                }\n            }\n        });\n\n        if (typeof arg1 == 'string')\n        {\n            // Return the results from the invoked function calls\n            return results.length > 1 ? results : results[0];\n        }\n        else\n        {\n            return results;\n        }\n    };\n\n    $.fn.materialtags.Constructor = TagsMaterialize;\n\n    /**\n     * Most options support both a string or number as well as a function as\n     * option value. This function makes sure that the option with the given\n     * key in the given options is wrapped in a function\n     *\n     * @param options\n     * @param key\n     */\n    function makeOptionItemFunction(options, key)\n    {\n        if (typeof options[key] !== 'function')\n        {\n            var propertyName = options[key];\n            options[key]     = function (item) { return item[propertyName]; };\n        }\n    }\n\n    function makeOptionFunction(options, key)\n    {\n        if (typeof options[key] !== 'function')\n        {\n            var value    = options[key];\n            options[key] = function () { return value; };\n        }\n    }\n\n    /**\n     * HtmlEncodes the given value\n     */\n    var htmlEncodeContainer = $('<div />');\n\n    function htmlEncode(value)\n    {\n        if (value)\n        {\n            return htmlEncodeContainer.text(value).html();\n        }\n        else\n        {\n            return '';\n        }\n    }\n\n    /**\n     * Returns the position of the caret in the given input field\n     * http://flightschool.acylt.com/devnotes/caret-position-woes/\n     *\n     * @param oField\n     * @returns {number}\n     */\n    function doGetCaretPosition(oField)\n    {\n        var iCaretPos = 0;\n        if (document.selection)\n        {\n            oField.focus();\n            var oSel  = document.selection.createRange();\n            oSel.moveStart('character', -oField.value.length);\n            iCaretPos = oSel.text.length;\n        }\n        else if (oField.selectionStart || oField.selectionStart == '0')\n        {\n            iCaretPos = oField.selectionStart;\n        }\n        return (iCaretPos);\n    }\n\n    /**\n     * Returns boolean indicates whether user has pressed an expected key combination.\n     * http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n     * [13, {which: 188, shiftKey: true}]\n     *\n     * @param keyPressEvent\n     * @param lookupList\n     * @returns {boolean}\n     */\n    function keyCombinationInList(keyPressEvent, lookupList)\n    {\n        var found = false;\n        $.each(lookupList, function (index, keyCombination)\n        {\n            if (typeof (keyCombination) === 'number' && keyPressEvent.which === keyCombination)\n            {\n                found = true;\n                return false;\n            }\n\n            if (keyPressEvent.which === keyCombination.which)\n            {\n                var alt   = !keyCombination.hasOwnProperty('altKey') || keyPressEvent.altKey === keyCombination.altKey,\n                    shift = !keyCombination.hasOwnProperty('shiftKey') || keyPressEvent.shiftKey === keyCombination.shiftKey,\n                    ctrl  = !keyCombination.hasOwnProperty('ctrlKey') || keyPressEvent.ctrlKey === keyCombination.ctrlKey;\n                if (alt && shift && ctrl)\n                {\n                    found = true;\n                    return false;\n                }\n            }\n        });\n\n        return found;\n    }\n\n    /**\n     * Initialize materialtags behaviour on inputs which have\n     * data-role=materialtags\n     */\n    $(function ()\n    {\n        $(\"input[data-role=materialtags]\").materialtags();\n    });\n})(window.jQuery);\n"],"sourceRoot":"/source/"}